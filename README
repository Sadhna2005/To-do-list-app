# To-Do List Application

A beautiful, full-stack to-do list web application built with PHP, MySQL, HTML, CSS, and JavaScript. Features a modern glassmorphism design with real-time task management and persistent database storage.

## 🌟 Features

- ✨ **Modern UI Design** - Glassmorphism effect with gradient backgrounds
- ➕ **Add Tasks** - Quick task creation with form submission
- ✅ **Toggle Completion** - Mark tasks as complete/incomplete with visual feedback
- ✏️ **Edit Tasks** - Inline editing with save/cancel options
- 🗑️ **Delete Tasks** - Remove tasks with confirmation dialog
- 💾 **Database Persistence** - All data stored in MySQL database
- 📱 **Responsive Design** - Works perfectly on mobile and desktop
- 🔄 **Form Handling** - Server-side processing with PHP
- 💿 **Local Backup** - JavaScript localStorage backup functionality
- 🎨 **Smooth Animations** - Hover effects and transitions

## 🛠️ Technologies Used

- **Backend:** PHP 7+ with MySQLi
- **Database:** MySQL
- **Frontend:** HTML5, CSS3, JavaScript
- **Server:** Apache (via XAMPP/WAMP/LAMP)
- **Database Management:** phpMyAdmin

## 📋 Prerequisites

- **XAMPP**, **WAMP**, or **LAMP** server environment
- **PHP 7.0** or higher
- **MySQL 5.7** or higher
- Modern web browser

## ⚡ Quick Setup

### 1. Install Local Server
Download and install [XAMPP](https://www.apachefriends.org/) (recommended) or your preferred local server solution.

### 2. Start Services
- Open XAMPP Control Panel
- Start **Apache** and **MySQL** services

### 3. Create Database
1. Open phpMyAdmin: `http://localhost/phpmyadmin`
2. Create a new database named: `todolist`
3. Create the tasks table:

```sql
CREATE DATABASE todolist;
USE todolist;

CREATE TABLE tasks (
    id INT AUTO_INCREMENT PRIMARY KEY,
    task_text TEXT NOT NULL,
    completed TINYINT(1) DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### 4. Install Application
1. Copy all project files to your web server directory:
   - **XAMPP:** `C:\xampp\htdocs\todolist\`
   - **WAMP:** `C:\wamp64\www\todolist\`
   - **LAMP:** `/var/www/html/todolist/`

2. Ensure you have these files:
   ```
   todolist/
   ├── index.php      # Main application file
   ├── style.css      # Styling and design
   └── script.js      # JavaScript functionality
   ```

### 5. Access Application
Open your browser and navigate to: `http://localhost/todolist/`

## 📁 File Structure

```
todolist/
│
├── index.php          # Main application (PHP + HTML)
│   ├── Database connection and CRUD operations
│   ├── Form handling (POST requests)
│   ├── HTML structure and task rendering
│   └── PHP logic for add/edit/delete/toggle
│
├── style.css          # Complete styling
│   ├── Glassmorphism container design
│   ├── Gradient backgrounds and animations
│   ├── Responsive layout and scrollbar customization
│   └── Task item styling and hover effects
│
└── script.js          # JavaScript functionality
    ├── toggleEdit() - Inline editing functionality
    ├── localStorage backup system
    └── Page load event handling
```

## 🔧 Database Configuration

The application connects to MySQL using these default settings:
```php
$conn = new mysqli("localhost", "root", "", "todolist");
```

**To modify database connection:**
1. Edit the database connection line in `index.php`
2. Update the parameters as needed:
   - **Host:** `localhost` (usually remains the same)
   - **Username:** `root` (default for XAMPP)
   - **Password:** `""` (empty by default)
   - **Database:** `todolist`

## 🎯 How to Use

### Adding Tasks
1. Type your task in the input field
2. Click the "Add" button or press Enter
3. Task appears instantly at the top of the list

### Managing Tasks
- **✓ Complete:** Click the green checkmark to mark as done
- **↶ Undo:** Click to mark completed task as incomplete
- **✎ Edit:** Click to edit task text inline
- **✕ Delete:** Click to remove task (with confirmation)

### Task States
- **Active Tasks:** Normal text appearance
- **Completed Tasks:** Crossed out with faded appearance

## 🎨 Design Features

### Glassmorphism UI
- Translucent container with backdrop blur
- Modern gradient background (purple to blue)
- Subtle shadow effects and rounded corners

### Interactive Elements
- Hover animations with transform effects
- Color-coded action buttons
- Smooth transitions and visual feedback

### Responsive Design
- Mobile-friendly layout
- Custom scrollbar styling
- Flexible container sizing

## 🔄 How It Works

### Backend (PHP)
1. **Database Connection:** Establishes MySQLi connection on page load
2. **POST Handling:** Processes form submissions for CRUD operations
3. **Data Retrieval:** Fetches all tasks ordered by newest first
4. **Security:** Uses prepared statements to prevent SQL injection

### Frontend (JavaScript)
1. **Edit Toggle:** Shows/hides edit forms dynamically
2. **Local Backup:** Saves tasks to localStorage for backup
3. **Page Load:** Initializes backup system when page loads

## 🛡️ Security Features

- **Prepared Statements** - Prevents SQL injection attacks
- **HTML Escaping** - Prevents XSS with `htmlspecialchars()`
- **Form Validation** - Server-side and client-side validation
- **POST-Redirect-GET** - Prevents form resubmission

## 🐛 Troubleshooting

### Common Issues

**❌ "Database connection failed"**
- Ensure MySQL service is running in XAMPP
- Check database name matches "todolist"
- Verify database connection credentials

**❌ Tasks not appearing**
- Check if `tasks` table exists with correct structure
- Verify PHP errors in XAMPP error logs
- Ensure files are in correct htdocs directory

**❌ Edit functionality not working**
- Check if `script.js` is loading properly
- Open browser console for JavaScript errors
- Verify file paths are correct

**❌ Styling not applied**
- Ensure `style.css` is in the same directory
- Check browser console for CSS loading errors
- Clear browser cache if needed

### Error Checking
```php
// Add this to index.php for debugging
error_reporting(E_ALL);
ini_set('display_errors', 1);
```

## 🚀 Future Enhancements

- **User Authentication** - Multi-user support with login system
- **Task Categories** - Organize tasks with color-coded categories  
- **Due Dates** - Add deadlines with reminder system
- **Priority Levels** - High/Medium/Low priority sorting
- **Search & Filter** - Find tasks quickly
- **Export Data** - Download tasks as CSV/PDF
- **Dark Mode** - Theme switching capability
- **Drag & Drop** - Reorder tasks by dragging

## 📝 Database Schema

```sql
-- Complete table structure
CREATE TABLE tasks (
    id INT AUTO_INCREMENT PRIMARY KEY,
    task_text TEXT NOT NULL,
    completed TINYINT(1) DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Sample data (optional)
INSERT INTO tasks (task_text, completed) VALUES 
('Complete the project documentation', 0),
('Review code changes', 1),
('Deploy to production server', 0);
```

## 🤝 Contributing

1. Fork the repository
2. Create your feature branch: `git checkout -b feature/amazing-feature`
3. Commit changes: `git commit -m 'Add amazing feature'`
4. Push to branch: `git push origin feature/amazing-feature`
5. Open a Pull Request

## 📄 License

This project is open source and available under the [MIT License](LICENSE).

## 💡 Tips

- **Performance:** For large task lists, consider adding pagination
- **Backup:** localStorage backup activates automatically on page load
- **Mobile:** App is fully responsive and touch-friendly
- **Customization:** Edit CSS variables for easy theme changes

---

**Built with ❤️ using PHP, MySQL, and modern web technologies**

*Ready to boost your productivity? Start adding tasks and get organized!* ✨
